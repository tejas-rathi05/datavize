// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  sessions ChatSession[]
  projectFiles ProjectFile[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  totalSize   BigInt   @default(0)
  fileCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     ProjectFile[]
  workflows Workflow[]

  @@map("projects")
}

model ProjectFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     BigInt
  mimeType     String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  config      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model ChatSession {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
  @@index([userId])
  @@index([slug])
}

model ChatMessage {
  id        String   @id @default(cuid())
  role      MessageRole
  content   String
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([sessionId])
  @@index([createdAt])
}

enum ProjectStatus {
  ACTIVE
  PROCESSING
  ERROR
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
